// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  foodLogs   FoodLog[]
  dailyGoal  DailyGoal?

  @@map("users")
}

// Future models for macro tracking features
model Food {
  id          Int      @id @default(autoincrement())
  name        String
  brand       String?
  calories    Float
  protein     Float
  carbs       Float
  fat         Float
  fiber       Float?
  sugar       Float?
  sodium      Float?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  foodLogs    FoodLog[]

  @@map("foods")
}

model FoodLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  foodId    Int      @map("food_id")
  quantity  Float    // grams or serving size
  mealType  String   @map("meal_type") // breakfast, lunch, dinner, snack
  loggedAt  DateTime @default(now()) @map("logged_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@map("food_logs")
}

model DailyGoal {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_id")
  calories     Float
  protein      Float
  carbs        Float
  fat          Float
  fiber        Float?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("daily_goals")
}
